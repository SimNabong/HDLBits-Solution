module top_module (
    input [3:0] x,
    input [3:0] y, 
    output [4:0] sum);

    wire [2:0] cinw;
    
    full_adder fhIns0(.a(x[0]), .b(y[0]), .cin(1'b0), .cout(cinw[0]), .sum(sum[0]));
    full_adder fhIns1(.a(x[1]), .b(y[1]), .cin(cinw[0]), .cout(cinw[1]), .sum(sum[1]));
    full_adder fhIns2(.a(x[2]), .b(y[2]), .cin(cinw[1]), .cout(cinw[2]), .sum(sum[2]));
    full_adder fhIns3(.a(x[3]), .b(y[3]), .cin(cinw[2]), .cout(sum[4]), .sum(sum[3]));

endmodule

module full_adder( 
    input a, b, cin,
    output cout, sum );
    
	assign cout = a&b | a&cin | b&cin;
    assign sum	= a ^ b ^ cin;
    
endmodule

__________________________________________________________________________________
or
________________________________________________________________________________


module top_module (
	input [3:0] x,
	input [3:0] y,
	output [4:0] sum
);

	// This circuit is a 4-bit ripple-carry adder with carry-out.
	assign sum = x+y;	// Verilog addition automatically produces the carry-out bit.

	// Verilog quirk: Even though the value of (x+y) includes the carry-out, (x+y) is still considered to be a 4-bit number (The max width of the two operands).
	// This is correct:
	// assign sum = (x+y);
	// But this is incorrect:
	// assign sum = {x+y};	// Concatenation operator: This discards the carry-out
endmodule

